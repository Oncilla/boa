// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/oncilla/boa/pkg/boa (interfaces: ConfigRegistry)

// Package mock_boa is a generated GoMock package.
package mock_boa

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockConfigRegistry is a mock of ConfigRegistry interface
type MockConfigRegistry struct {
	ctrl     *gomock.Controller
	recorder *MockConfigRegistryMockRecorder
}

// MockConfigRegistryMockRecorder is the mock recorder for MockConfigRegistry
type MockConfigRegistryMockRecorder struct {
	mock *MockConfigRegistry
}

// NewMockConfigRegistry creates a new mock instance
func NewMockConfigRegistry(ctrl *gomock.Controller) *MockConfigRegistry {
	mock := &MockConfigRegistry{ctrl: ctrl}
	mock.recorder = &MockConfigRegistryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConfigRegistry) EXPECT() *MockConfigRegistryMockRecorder {
	return m.recorder
}

// BindEnv mocks base method
func (m *MockConfigRegistry) BindEnv(arg0 ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BindEnv", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// BindEnv indicates an expected call of BindEnv
func (mr *MockConfigRegistryMockRecorder) BindEnv(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindEnv", reflect.TypeOf((*MockConfigRegistry)(nil).BindEnv), arg0...)
}

// SetDefault mocks base method
func (m *MockConfigRegistry) SetDefault(arg0 string, arg1 interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetDefault", arg0, arg1)
}

// SetDefault indicates an expected call of SetDefault
func (mr *MockConfigRegistryMockRecorder) SetDefault(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDefault", reflect.TypeOf((*MockConfigRegistry)(nil).SetDefault), arg0, arg1)
}
